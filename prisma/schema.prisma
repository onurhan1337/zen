generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Define a relationship with the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use unique constraints for account identification
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use an index for faster lookups by userId
  @@index([userId])
}

model User {
  id             String                 @id @unique @default(cuid())
  name           String?
  email          String?                @unique
  emailVerified  DateTime?
  image          String?
  // Define relationships for User's accounts, sessions, and projects
  accounts       Account[]
  sessions       Session[]
  ownedProjects  Project[]              @relation("projectOwners")
  memberProjects Project[]              @relation("projectMembers")
  ownedTasks     Task[]                 @relation("TaskOwner")
  assignedTasks  Task[]                 @relation("TaskAssignee")
  inviteAttempts ProjectInviteAttempt[] @relation("ProjectInviteAttempt")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Use unique constraints for verification tokens
  @@unique([identifier, token])
}

model Project {
  id             String                 @id @unique @default(cuid())
  name           String
  description    String
  startDate      DateTime?              @default(now())
  endDate        DateTime?
  status         ProjectStatus          @default(active)
  userId         String
  owners         User[]                 @relation("projectOwners")
  members        User[]                 @relation("projectMembers")
  tasks          Task[]
  inviteCode     String?                @unique @default(uuid())
  inviteAttempts ProjectInviteAttempt[]

  @@unique([id, name])
  @@index([userId])
}

enum Role {
  owner
  member
}

enum ProjectStatus {
  active
  archived
}

model ProjectInviteAttempt {
  id        String    @id @unique @default(cuid())
  userId    String
  name      String
  email     String
  projectId String
  expires   DateTime?
  role      Role      @default(member)
  user      User      @relation("ProjectInviteAttempt", fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId, projectId])
}

//  ______   ______     ______     __  __    
// /\__  _\ /\  __ \   /\  ___\   /\ \/ /    
// \/_/\ \/ \ \  __ \  \ \___  \  \ \  _"-.  
//    \ \_\  \ \_\ \_\  \/\_____\  \ \_\ \_\ 
//     \/_/   \/_/\/_/   \/_____/   \/_/\/_/ 

model Task {
  id          String     @id @unique @default(cuid())
  name        String
  description String
  status      TaskStatus @default(backlog)
  startDate   DateTime?  @default(now())
  endDate     DateTime?
  priority    Priority   @default(low)
  ownerId     String
  assigneeId  String? // Assignee can be optional
  projectId   String

  // Define a relationship with the User and Project models
  owner    User    @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Use a unique constraint for task names
  @@unique([id, name])
  @@index([projectId, ownerId, assigneeId])
}

enum TaskStatus {
  backlog
  todo
  inProgress
  done
}

enum Priority {
  low
  medium
  high
}
