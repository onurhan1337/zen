generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // Use connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Use a direct connection
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Define a relationship with the User model
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use unique constraints for account identification
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use an index for faster lookups by userId
  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Define relationships for User's accounts, sessions, and projects
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  ownedTasks Task[] @relation("TaskOwner")
  memberTasks Task[] @relation("TaskMembers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Use unique constraints for verification tokens
  @@unique([identifier, token])
}                                                                                                             

model Project {
  id          String    @id @default(cuid()) @unique
  name        String
  description String
  startDate   DateTime? @default(now())
  endDate     DateTime? 
  status      ProjectStatus @default(active)
  userId      String
  // Define a relationship with the User model
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]

  // Use a unique constraint for project names
  @@unique([id, name])
  @@index([userId])
}

enum ProjectStatus {
  active
  archived
}

//  ______   ______     ______     __  __    
// /\__  _\ /\  __ \   /\  ___\   /\ \/ /    
// \/_/\ \/ \ \  __ \  \ \___  \  \ \  _"-.  
//    \ \_\  \ \_\ \_\  \/\_____\  \ \_\ \_\ 
//     \/_/   \/_/\/_/   \/_____/   \/_/\/_/ 

model Task {
  id          String    @id @default(cuid()) @unique
  name        String
  description String
  status      TaskStatus @default(backlog)
  startDate   DateTime? @default(now())
  endDate     DateTime? 
  priority    Priority @default(low)
  ownerId     String    @default("validUserId") // Set a valid user ID as the default
  projectId   String
  
  // Define a relationship with the User and Project models
  owner       User     @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     User[]   @relation("TaskMembers")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Use a unique constraint for task names
  @@unique([id, name])
  @@index([projectId, ownerId])
}

enum TaskStatus {
  backlog
  todo
  inProgress
  done
}

enum Priority {
  low
  medium
  high
}