generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // Use connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Use a direct connection
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Define a relationship with the User model
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use unique constraints for account identification
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use an index for faster lookups by userId
  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Define relationships for User's accounts, sessions, and projects
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Use unique constraints for verification tokens
  @@unique([identifier, token])
}

enum ProjectStatus {
  active
  inactive
}

model Project {
  id          String    @id @default(cuid()) @unique
  name        String
  description String
  startDate   DateTime? @default(now())
  endDate     DateTime? 
  status      String   @default("active")
  userId      String
  // Define a relationship with the User model
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Use a unique constraint for project names
  @@unique([id, name])
  @@index([userId])
}
